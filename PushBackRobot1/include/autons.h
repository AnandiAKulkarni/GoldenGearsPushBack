#pragma once
#include "JAR-Template/drive.h"
#include "vex.h"

class Drive;

extern Drive chassis;
// extern bool isHookOut;
extern bool isHangDown;
extern bool isArmGoingToPickup;
extern const float skills_turn_settle_time;
extern const float skills_turn_timeout;

void default_constants();
void manual_skills_corner_1();
void odom_constants();
void rotation_sensor_callback();
void three_point_auton_left();
void wall_stake_auton_right();
void wall_stake_auton_left();
void skills();
void safe_skills();
void skills_corner_1();
void skills_corner_2();
void skills_corner_3();
void skills_corner_4();
void skills_corner_1_safe();
void skills_corner_2_safe();
void skills_corner_3_safe();
void skills_corner_4_safe();
void three_point_auton_right();
void tank_odom_test();
void holonomic_odom_test();
void intake_ring_in();
void intake_ring_out();
void intake_ring_in_skills();
void intake_ring_out_skills();
void intake_stop();
void chain_ring_up();
void chain_ring_down();
void chain_ring_up_skills();
void chain_ring_down_skills();
void chain_stop();
void hook_toggle();
void hang_toggle();
void sweeper_toggle();
void arm_down();
void arm_up();
void arm_stop();
void hook_in();
void hook_out();
void bouncing_intake_up();
void bouncing_intake_down();
void four_point_auton_left();
void four_point_auton_right();
void preload_mogo_left_side();
void preload_mogo_right_side();
void six_point_two_mogo_right();
void six_point_two_mogo_left();
void goal_rush_red();
void goal_rush_blue();
void one_stake_red();
void one_stake_blue();
void sweeper_up();
void sweeper_down();
void arm_to_rest();
void arm_to_pickup();
void drive_short_distance(double short_distance);
void drive_long_distance(double long_distance);
void fast_turn(int angle);
int hook_out_on_yellow();
int hook_out_on_red_ring();
int look_for_blue_rings();
void manual_skills_corner_1_task();
void goal_rush_positive_corner_end_blue();
void goal_rush_positive_corner_end_red();
void goal_rush_ladder_end_blue();
void goal_rush_ladder_end_red();
void left_pos_corner_wall_stake_auton_end();
void right_pos_corner_wall_stake_auton_end();
void left_default_ladder_wall_stake_auton_end();
void right_default_ladder_wall_stake_auton_end();
void red_left_7pt_wall_stake_auton_end();
void blue_right_7pt_wall_stake_auton_end();
void AITest();
void turnRight();
bool has_mogo();